pipeline {
  agent any

  parameters {
    string(name: 'build_version', defaultValue: '1.0', description: 'Build version to use for Docker image')
  }

  environment {
      TELEGRAM_BOT_TOKEN = credentials('BOT_TOKEN')
      TELEGRAM_CHAT_ID = credentials('CHAT_ID')
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'master', url: 'https://github.com/canhnd15/jenkins-ci-tutorial.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd blog-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://sonarqube:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd blog-app && \
              mvn org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar \
              -Dsonar.login=$SONAR_AUTH_TOKEN \
              -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "canhnd15/blog-app:${build_version}"
        REGISTRY_CREDENTIALS = credentials('dockerhub')
      }
      steps {
        script {
            sh 'cd blog-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "dockerhub") {
                dockerImage.push()
            }
        }
      }
    }

    stage('Run Application') {
        environment {
            DOCKER_IMAGE = "canhnd15/blog-app:${build_version}"
        }
        steps {
            script {
                sh """
                    docker stop blog-app || true
                    docker rm blog-app || true
                    docker run -d --name blog-app --network=ci_common-network -p 8090:8088 ${DOCKER_IMAGE}
                """
                echo "Spring Boot application is running at http://localhost:8090"
            }
        }
    }

    post {
        always {
            script {
                def status = currentBuild.currentResult
                def message = "Build ${env.JOB_NAME} #${env.BUILD_NUMBER} completed with status: ${status}."
                sh """
                    curl -X POST \
                    https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
                    -d chat_id=${TELEGRAM_CHAT_ID} \
                    -d text="${message}"
                """
            }
        }
    }
  }
}